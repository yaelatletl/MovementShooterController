shader_type spatial;
render_mode unshaded;
uniform sampler2D viewport : source_color;

// [Godot Super Scaling]
// created by Andres Hernandez


// viewport to sample and its resolution
uniform vec2 view_resolution;
varying vec2 view_pixel_size;
uniform float smoothness;

// texture coords for directional sampling
//varying vec2 center_pixel;
//varying vec2 north_pixel;
//varying vec2 south_pixel;
//varying vec2 east_pixel;
//varying vec2 west_pixel;
//varying vec2 north_east_pixel;
//varying vec2 north_west_pixel;
//varying vec2 south_east_pixel;
//varying vec2 south_west_pixel;

// offset coordinates used for super sampling
const vec2 offset_uv = vec2(0.36, 0.64);

// finds the absolute distance from two floats
float float_diff(float float_a, float float_b) {
	return abs(float_a - float_b);
}

// maximum difference for all 3 color channels
float color_diff(vec4 color_a, vec4 color_b) {
	float diff_r = float_diff(color_a.r, color_b.r);
	float diff_g = float_diff(color_a.g, color_b.g);
	float diff_b = float_diff(color_a.b, color_b.b);
	return max(diff_r, max(diff_g, diff_b));
}

// simple average of two colors
vec4 color_average(vec4 color_a, vec4 color_b) {
	return mix(color_a, color_b, 0.5);
}

// take 9 samples and perform a directional average
vec4 directional_average(vec2 uv_in) {
	vec2 north = vec2(0.0, view_pixel_size.y);
	vec2 south = vec2(0.0, -view_pixel_size.y);
	vec2 east = vec2(view_pixel_size.x, 0.0);
	vec2 west = vec2(-view_pixel_size.x, 0.0);
	
	vec2 center_pixel = uv_in;
	vec2 north_pixel = center_pixel + north;
	vec2 south_pixel = center_pixel + south;
	vec2 east_pixel = center_pixel + east;
	vec2 west_pixel = center_pixel + west;
	vec2 north_east_pixel = center_pixel + north + east;
	vec2 north_west_pixel = center_pixel + north + west;
	vec2 south_east_pixel = center_pixel + south + east;
	vec2 south_west_pixel = center_pixel + south + west;
	// get the colors of all 9 pixels in the 3x3 grid
	vec4 pixel_0 = textureLod(viewport, center_pixel, 0.0); // center pixel
	vec4 pixel_1 = textureLod(viewport, north_pixel, 0.0); // north pixel
	vec4 pixel_2 = textureLod(viewport, south_pixel, 0.0); // south pixel
	vec4 pixel_3 = textureLod(viewport, east_pixel, 0.0); // east pixel
	vec4 pixel_4 = textureLod(viewport, west_pixel, 0.0); // west pixel
	vec4 pixel_5 = textureLod(viewport, north_east_pixel, 0.0); // north-east pixel
	vec4 pixel_6 = textureLod(viewport, north_west_pixel, 0.0); // north-west pixel
	vec4 pixel_7 = textureLod(viewport, south_east_pixel, 0.0); // south-east pixel
	vec4 pixel_8 = textureLod(viewport, south_west_pixel, 0.0); // south-west pixel
	
	// find the maximum color difference for each of 12 directions
	float dir_1 = color_diff(pixel_0, pixel_1); // center to north
	float dir_2 = color_diff(pixel_0, pixel_2); // center to south
	float dir_3 = color_diff(pixel_0, pixel_3); // center to east
	float dir_4 = color_diff(pixel_0, pixel_4); // center to west
	float dir_5 = color_diff(pixel_0, pixel_5); // center to north-east
	float dir_6 = color_diff(pixel_0, pixel_6); // center to north-west
	float dir_7 = color_diff(pixel_0, pixel_7); // center to south-east
	float dir_8 = color_diff(pixel_0, pixel_8); // center to south-west
	float dir_9 = color_diff(pixel_1, pixel_4); // north to west
	float dir_10 = color_diff(pixel_1, pixel_3); // north to east
	float dir_11 = color_diff(pixel_2, pixel_3); // south to east
	float dir_12 = color_diff(pixel_2, pixel_4); // south to west
	
	// find the minimum distance of each of the 12 directions
	float min_dist = dir_1;
	min_dist = min(min_dist, dir_2);
	min_dist = min(min_dist, dir_3);
	min_dist = min(min_dist, dir_4);
	min_dist = min(min_dist, dir_5);
	min_dist = min(min_dist, dir_6);
	min_dist = min(min_dist, dir_7);
	min_dist = min(min_dist, dir_8);
	min_dist = min(min_dist, dir_9);
	min_dist = min(min_dist, dir_10);
	min_dist = min(min_dist, dir_11);
	min_dist = min(min_dist, dir_12);
	
	// get the average color along the minimum direction
	vec4 result = pixel_0;
	if (min_dist == dir_1)
		result = color_average(pixel_0, pixel_1); // center to north
	else if (min_dist == dir_2) 
		result = color_average(pixel_0, pixel_2); // center to south
	else if (min_dist == dir_3) 
		result = color_average(pixel_0, pixel_3); // center to east
	else if (min_dist == dir_4) 
		result = color_average(pixel_0, pixel_4); // center to west
	else if (min_dist == dir_5) 
		result = color_average(pixel_0, pixel_5); // center to north-east
	else if (min_dist == dir_6) 
		result = color_average(pixel_0, pixel_6); // center to north-west
	else if (min_dist == dir_7) 
		result = color_average(pixel_0, pixel_7); // center to south-east
	else if (min_dist == dir_8) 
		result = color_average(pixel_0, pixel_8); // center to south-west
	else if (min_dist == dir_9) 
		result = color_average(pixel_0, color_average(pixel_1, pixel_4)); // north to west
	else if (min_dist == dir_10) 
		result = color_average(pixel_0, color_average(pixel_1, pixel_3)); // north to east
	else if (min_dist == dir_11) 
		result = color_average(pixel_0, color_average(pixel_2, pixel_3)); // south to east
	else if (min_dist == dir_12) 
		result = color_average(pixel_0, color_average(pixel_2, pixel_4)); // south to west
	return result;
}

// partial derivative on x-axis
vec2 deriv_x(vec2 pos, vec4 frag, vec2 pixel) {
	vec2 offset = vec2(pixel.x, 0.0);
	vec2 pos_plus = pos + offset;
	vec2 pos_minus = pos - offset;
	int coord = int(frag.x) / 2;
	bool even = int(coord * 2) == int(frag.x);
	return even ? (pos_plus - pos) : (pos - pos_minus);
}

// partial derivative on y-axis
vec2 deriv_y(vec2 pos, vec4 frag, vec2 pixel) {
	vec2 offset = vec2(0.0, pixel.y);
	vec2 pos_plus = pos + offset;
	vec2 pos_minus = pos - offset;
	int coord = int(frag.y) / 2;
	bool even = int(coord * 2) == int(frag.y);
	return even ? (pos_plus - pos) : (pos - pos_minus);
}

// take 4 samples in a rotated grid for super sampling
vec4 super_sample(vec2 base_uv, vec4 frag, vec2 pixel) {
	vec2 dx = deriv_x(base_uv, frag, pixel);
	vec2 dy = deriv_y(base_uv, frag, pixel);
	vec2 uv = vec2(0.0);
	vec4 color = vec4(0.0);
	uv = base_uv + offset_uv.x * dx + offset_uv.y * dy;
	color += textureLod(viewport, uv, 0.0);
	uv = base_uv - offset_uv.x * dx - offset_uv.y * dy;
	color += textureLod(viewport, uv, 0.0);
	uv = base_uv + offset_uv.y * dx - offset_uv.x * dy;
	color += textureLod(viewport, uv, 0.0);
	uv = base_uv - offset_uv.y * dx + offset_uv.x * dy;
	color += textureLod(viewport, uv, 0.0);
	color *= 0.25;
	return color;
}

// precompute the sample direction texture coordinates
void vertex() {
	view_pixel_size = 1.0 / view_resolution;
	

}

// draw the new color on the screen
void fragment() {
	vec4 dir_avg = directional_average(SCREEN_UV);
	vec4 super = super_sample(SCREEN_UV, FRAGCOORD, view_pixel_size);
	vec4 result = mix(dir_avg, super, smoothness);
	result.a = 1.0;
	ALBEDO = result.rgb;
}


